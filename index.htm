<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demonstração - I.A. Conversacional</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        #chat-container::-webkit-scrollbar {
            width: 6px;
        }
        #chat-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        #chat-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center h-screen">

    <div class="w-full max-w-md h-full sm:h-[90vh] sm:max-h-[700px] flex flex-col bg-white shadow-2xl rounded-lg overflow-hidden">
        <!-- Header -->
        <header class="bg-blue-600 text-white p-4 flex items-center shadow-md z-10">
            <img src="https://placehold.co/40x40/FFFFFF/3B82F6?text=IA" alt="Logo" class="w-10 h-10 rounded-full mr-3 border-2 border-white">
            <div>
                <h1 class="text-lg font-bold">Assistente com I.A.</h1>
                <p class="text-sm opacity-90">Demonstração Conversacional</p>
            </div>
        </header>

        <!-- Chat Messages -->
        <main id="chat-container" class="flex-1 p-6 overflow-y-auto bg-gray-50">
            <!-- Chat starts empty -->
        </main>

        <!-- Input -->
        <footer id="input-container" class="p-4 border-t border-gray-200 bg-white">
            <p id="initial-prompt" class="text-center text-sm text-gray-500 mb-2">Mande uma mensagem para testá-lo</p>
            <div class="relative">
                <input id="user-input" type="text" placeholder="Digite sua pergunta..." class="w-full pl-4 pr-12 py-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50">
                <button id="send-button" class="absolute right-2 top-1/2 -translate-y-1/2 bg-blue-600 hover:bg-blue-700 text-white p-2.5 rounded-full">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" /></svg>
                </button>
            </div>
        </footer>
    </div>

<script>
const chatContainer = document.getElementById('chat-container');
const inputContainer = document.getElementById('input-container');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
const initialPrompt = document.getElementById('initial-prompt');

// -----------------------------------------------------------------------------
// AVISO DE SEGURANÇA: NUNCA exponha sua chave de API em código front-end
// em um projeto real. Use este método APENAS para demonstrações locais.
// -----------------------------------------------------------------------------
const DEEPSEEK_API_KEY = "sk-b5bcad67311e4b7fb92714e81f453975"; 
// -----------------------------------------------------------------------------

let conversationHistory = [
    { role: "system", content: "Você é um assistente virtual da empresa 'Soluções Impulso', especialista em marketing digital, tecnologia e vendas. Suas respostas devem ser úteis, diretas, profissionais e amigáveis. Você está em uma demonstração, então mostre suas capacidades." }
];

async function getDeepSeekResponse() {
    if (!DEEPSEEK_API_KEY || DEEPSEEK_API_KEY === "sk-b5bcad67311e4b7fb92714e81f453975") {
        return "Erro de configuração: A chave da API do DeepSeek não foi inserida no código. Por favor, adicione a chave para que a demonstração funcione.";
    }

    const apiUrl = 'https://api.deepseek.com/chat/completions';
    const payload = {
        model: "deepseek-chat",
        messages: conversationHistory
    };

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${DEEPSEEK_API_KEY}` },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            console.error("Erro na API:", response.status, await response.text());
            return "Desculpe, estou com um problema técnico para me conectar à I.A. no momento. Por favor, tente novamente mais tarde.";
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;
        
        // Adiciona a resposta da IA ao histórico para manter o contexto
        conversationHistory.push({ role: "assistant", content: aiResponse });
        
        return aiResponse;
    } catch (error) {
        console.error("Erro na requisição:", error);
        return "Desculpe, não foi possível conectar ao serviço de I.A. Verifique sua conexão com a internet.";
    }
}

function scrollToBottom() {
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function displayTypingIndicator() {
    const typingElement = document.createElement('div');
    typingElement.id = 'typing-indicator';
    typingElement.className = 'flex justify-start mb-4';
    typingElement.innerHTML = `<div class="bg-gray-200 text-gray-800 p-3 rounded-lg flex items-center"><div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style="animation-delay: 0s;"></div><div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce ml-1" style="animation-delay: 0.2s;"></div><div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce ml-1" style="animation-delay: 0.4s;"></div></div>`;
    chatContainer.appendChild(typingElement);
    scrollToBottom();
}

function removeTypingIndicator() {
    const typingElement = document.getElementById('typing-indicator');
    if (typingElement) typingElement.remove();
}

function addBotMessage(text) {
    const messageElement = document.createElement('div');
    messageElement.className = 'flex justify-start mb-4';
    let formattedText = text.replace(/\*(.*?)\*/g, '<strong class="font-semibold">$1</strong>');
    formattedText = formattedText.replace(/\n/g, '<br>');
    messageElement.innerHTML = `<div class="bg-gray-200 text-gray-800 p-3 rounded-lg max-w-xs sm:max-w-sm">${formattedText}</div>`;
    chatContainer.appendChild(messageElement);
    scrollToBottom();
}

function addUserMessage(text) {
    const messageElement = document.createElement('div');
    messageElement.className = 'flex justify-end mb-4';
    messageElement.innerHTML = `<div class="bg-blue-600 text-white p-3 rounded-lg max-w-xs sm:max-w-sm">${text}</div>`;
    chatContainer.appendChild(messageElement);
    scrollToBottom();
}

async function handleUserInput() {
    const userMessage = userInput.value.trim();
    if (userMessage === '') return;

    // Esconde o prompt inicial assim que a primeira mensagem for enviada
    if (initialPrompt) {
        initialPrompt.style.display = 'none';
    }

    addUserMessage(userMessage);
    userInput.value = '';
    
    // Adiciona a mensagem do usuário ao histórico
    conversationHistory.push({ role: "user", content: userMessage });

    displayTypingIndicator();

    const aiResponse = await getDeepSeekResponse();

    removeTypingIndicator();
    addBotMessage(aiResponse);
}

sendButton.addEventListener('click', handleUserInput);
userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        handleUserInput();
    }
});

// Foco inicial no campo de input
document.addEventListener('DOMContentLoaded', () => {
    userInput.focus();
});

</script>

</body>
</html>
